// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: router/router.proto

package router

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouterV1Client is the client API for RouterV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterV1Client interface {
	JoinFilter(ctx context.Context, in *JoinFilterRequest, opts ...grpc.CallOption) (*JoinFilterResponse, error)
	Events(ctx context.Context, opts ...grpc.CallOption) (RouterV1_EventsClient, error)
}

type routerV1Client struct {
	cc grpc.ClientConnInterface
}

func NewRouterV1Client(cc grpc.ClientConnInterface) RouterV1Client {
	return &routerV1Client{cc}
}

func (c *routerV1Client) JoinFilter(ctx context.Context, in *JoinFilterRequest, opts ...grpc.CallOption) (*JoinFilterResponse, error) {
	out := new(JoinFilterResponse)
	err := c.cc.Invoke(ctx, "/router.RouterV1/JoinFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerV1Client) Events(ctx context.Context, opts ...grpc.CallOption) (RouterV1_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouterV1_ServiceDesc.Streams[0], "/router.RouterV1/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerV1EventsClient{stream}
	return x, nil
}

type RouterV1_EventsClient interface {
	Send(*GatewayToRouterEvent) error
	Recv() (*RouterToGatewayEvent, error)
	grpc.ClientStream
}

type routerV1EventsClient struct {
	grpc.ClientStream
}

func (x *routerV1EventsClient) Send(m *GatewayToRouterEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerV1EventsClient) Recv() (*RouterToGatewayEvent, error) {
	m := new(RouterToGatewayEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterV1Server is the server API for RouterV1 service.
// All implementations must embed UnimplementedRouterV1Server
// for forward compatibility
type RouterV1Server interface {
	JoinFilter(context.Context, *JoinFilterRequest) (*JoinFilterResponse, error)
	Events(RouterV1_EventsServer) error
	mustEmbedUnimplementedRouterV1Server()
}

// UnimplementedRouterV1Server must be embedded to have forward compatible implementations.
type UnimplementedRouterV1Server struct {
}

func (UnimplementedRouterV1Server) JoinFilter(context.Context, *JoinFilterRequest) (*JoinFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinFilter not implemented")
}
func (UnimplementedRouterV1Server) Events(RouterV1_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedRouterV1Server) mustEmbedUnimplementedRouterV1Server() {}

// UnsafeRouterV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterV1Server will
// result in compilation errors.
type UnsafeRouterV1Server interface {
	mustEmbedUnimplementedRouterV1Server()
}

func RegisterRouterV1Server(s grpc.ServiceRegistrar, srv RouterV1Server) {
	s.RegisterService(&RouterV1_ServiceDesc, srv)
}

func _RouterV1_JoinFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterV1Server).JoinFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/router.RouterV1/JoinFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterV1Server).JoinFilter(ctx, req.(*JoinFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterV1_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterV1Server).Events(&routerV1EventsServer{stream})
}

type RouterV1_EventsServer interface {
	Send(*RouterToGatewayEvent) error
	Recv() (*GatewayToRouterEvent, error)
	grpc.ServerStream
}

type routerV1EventsServer struct {
	grpc.ServerStream
}

func (x *routerV1EventsServer) Send(m *RouterToGatewayEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerV1EventsServer) Recv() (*GatewayToRouterEvent, error) {
	m := new(GatewayToRouterEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterV1_ServiceDesc is the grpc.ServiceDesc for RouterV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouterV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "router.RouterV1",
	HandlerType: (*RouterV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinFilter",
			Handler:    _RouterV1_JoinFilter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _RouterV1_Events_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "router/router.proto",
}
